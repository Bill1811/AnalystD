# -*- coding: utf-8 -*-
"""Nhom10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19V2KA4OesA9LwIjN1qsQXr41ha98buC5
"""

import pandas as pd
import matplotlib.pyplot as plt
import datetime
from scipy.stats import zscore
import numpy as np
import matplotlib.cm as cm
import seaborn as sns
import random
from sklearn.preprocessing import LabelEncoder
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import MinMaxScaler


path = "/content/drive/MyDrive/Data_Train_p1.xlsx"
path2 = "/content/drive/MyDrive/Data_Train_p2.xlsx"

#preproccessing
Data_Train_p1 = pd.read_excel(path)
Data_Train_p2 = pd.read_excel(path2)
merged_data = pd.concat([Data_Train_p1, Data_Train_p2],ignore_index=True)
merged_data.tail()

"""1 / Cho biết kiểu dữ liệu của các thuộc tính

"""

data_type = merged_data.dtypes
print(data_type)

"""

```
# This is formatted as code
```

2a/Giá cao nhất, thấp nhất, giá trung bình, mức giá xuất hiện nhiều"""

max_price = merged_data['Price'].max()
min_price = merged_data['Price'].min()
mean_price = merged_data['Price'].mean()
most_price = merged_data['Price'].mode()[0]

print("Giá cao nhất: ",max_price)
print("Giá thấp nhất: ",min_price)
print("Giá trung bình: ",mean_price)
print("Mức giá xuất hiện nhiều: ",most_price)

"""2b/Độ lệch chuẩn của cột price?"""

price_std = merged_data['Price'].std()
print("Độ lệch chuẩn của cột Price: ",price_std)

"""2c/Cho biết giá phân phối xung quanh trung tâm hay cách xa trung tâm?
Nhận xét về giá trị mean và median của tập dữ liệu
"""

#Cho biết giá phân phối xung quanh trung tâm hay cách xa trung tâm?
median_price = merged_data['Price'].median()
if mean_price < median_price:
  price_dis = "phân phối xung quanh trung tâm"
else:
  price_dis = "phân phối cách xa trung tâm"

print("Phân phối giá: ",price_dis)
print("Median: ",median_price)

#Nhận xét về giá trị mean và median của tập dữ liệu
if mean_price == median_price:
    print("Mean và Median bằng nhau -> phân phối đối xứng.")
elif mean_price > median_price:
    print("Mean lớn hơn Median -> có sự lệch lớn (lệch dương) trong phân phối.")
else:
    print("Mean nhỏ hơn Median -> có sự lệch nhỏ (lệch âm) trong phân phối.")

"""2d/Vẽ đồ thị histogram để nhận xét dữ liệu có bị lệch không?"""

plt.figure(figsize=(10, 6))
plt.hist(merged_data['Price'], bins=30)
plt.title('Phân phối giá')
plt.xlabel('Giá')
plt.ylabel('Số lượng chuyến bay')
plt.show()

"""3/Mô tả số lượng missing value của mỗi thuộc tính"""

missing_values = merged_data.isnull().sum()
print("Số lượng missing value của mỗi thuộc tính:")
print(missing_values)

"""4/Tính tỷ lệ % missing value của mỗi thuộc tính"""

missing_values_percent = (missing_values / len(merged_data)) * 100
print(missing_values_percent)

"""*5*/Xử lý dữ liệu missing"""

merged_data.dropna(subset=['Route'])
merged_data.dropna(subset=['Total_Stops'])

# Lấy giá trị mode của cột "Route" và "Total_Stops"
mode_route = merged_data['Route'].mode()[0]
mode_stops = merged_data['Total_Stops'].mode()[0]

#thay thế giá trị missing
merged_data['Route'].fillna(mode_route, inplace=True)
merged_data['Total_Stops'].fillna(mode_stops, inplace=True)

print("\nThông tin sau khi xử lý:")
print(merged_data[['Route', 'Total_Stops']].info())

"""6/Outlier: sử dụng đồ thị boxplot để quan sát cột Price có tồn tại outlier không?"""

plt.title('Boxplot của cột Price', fontsize=15, fontweight='bold')
plt.xlabel('Price', fontsize=14, fontstyle='italic')
plt.xticks(fontsize=10)
plt.tight_layout()
plt.boxplot (merged_data['Price'], vert=False)
plt.show()

"""1/Giá vé tăng khi nào?

"""

merged_data['Date_of_Journey'] = pd.to_datetime(merged_data['Date_of_Journey'], format='%d/%m/%Y')
merged_data['Year'] = merged_data['Date_of_Journey'].dt.year
merged_data['Month'] = merged_data['Date_of_Journey'].dt.month
merged_data['Day'] = merged_data['Date_of_Journey'].dt.day
grouped_data = merged_data.groupby(['Year', 'Month'])['Price'].mean().reset_index()
plt.figure(figsize=(10, 6))
sns.lineplot(data=grouped_data, x='Month', y='Price', marker='o', style='Year', color='blue')
plt.title('Biểu đồ giá vé trung bình theo tháng')
plt.xticks(grouped_data['Month'])
plt.show()

"""2/So sánh tỷ lệ các chuyến bay thẳng và trung chuyển (có dừng)

"""

direct_flights = len(merged_data[merged_data['Total_Stops'] == 'non-stop'])
transit_flights = len(merged_data[merged_data['Total_Stops'] != 'non-stop'])

plt.figure(figsize=(10,5))
plt.pie([direct_flights, transit_flights], labels=['Chuyến bay thẳng', 'Chuyến bay trung chuyển'], autopct='%1.1f%%')
plt.title('Tỷ lệ các chuyến bay thẳng và trung chuyển')
plt.show()

"""3/Nước nào có lượng chuyến bay nhiều nhất?"""

country_counts = merged_data['Source'].value_counts()

colors = ['grey'] * len(country_counts)
max_index = country_counts.idxmax()
colors[country_counts.index.get_loc(max_index)] = '#FF0000'

plt.figure(figsize=(10, 6))
sns.barplot(x=country_counts.index, y=country_counts.values, palette=colors)
plt.title('Biểu Đồ Cột Thể Hiện Số Lượng Chuyến Bay Theo Nước', fontsize=16, fontweight='bold', pad=20, color='#FF0000')  # Mã màu đỏ đậm

plt.text(1.05, 0.8, 'Trục Ox: Số lượng chuyến bay\nTrục Oy: Nước', transform=plt.gca().transAxes, fontsize=12, va='center', bbox=dict(facecolor='white', edgecolor='white', boxstyle='round,pad=0.5'))
plt.show()

"""4/Hãng máy bay nào được khách đặt vé nhiều/thấp nhất?"""

airline_counts = merged_data['Airline'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=airline_counts.values, y=airline_counts.index, palette="Set2")
plt.title('Biểu Đồ Cột Thể Hiện Số Lượng Đặt Vé Theo Hãng Máy Bay', fontsize=16, fontweight='bold', pad=20, color='#FF0000')
plt.text(1.05, 0.8, 'Trục Ox: Hãng Máy Bay\nTrục Oy: Số lượng vé đặt', transform=plt.gca().transAxes, fontsize=12, va='center', bbox=dict(facecolor='white', edgecolor='white', boxstyle='round,pad=0.5'))
plt.show()

"""5/Tháng nào là tháng cao điểm"""

merged_data['Date_of_Journey'] = pd.to_datetime(merged_data['Date_of_Journey'], format='%d/%m/%Y')

month_counts = merged_data['Date_of_Journey'].dt.month.value_counts()

plt.figure(figsize=(8, 8))
plt.pie(month_counts, labels=month_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Biểu Đồ Tròn Phân Phối Số Lượng Chuyến Bay Theo Tháng', fontsize=14, fontweight='bold', pad=10, color='#FF0000')
plt.show()

merged_data['Date_of_Journey'] = pd.to_datetime(merged_data['Date_of_Journey'], format='%d/%m/%Y')

month_counts = merged_data['Date_of_Journey'].dt.to_period('M').value_counts().sort_index()

plt.figure(figsize=(10, 6))
sns.lineplot(x=month_counts.index.astype(str), y=month_counts.values)
plt.title('Biểu Đồ Đường Phân Phối Số Lượng Chuyến Bay Theo Tháng', fontsize=14, fontweight='bold', pad=10, color='#FF0000')
plt.xticks(rotation=45)
plt.xlabel('Tháng')
plt.ylabel('Số lượng chuyến bay')
plt.show()

"""6/Giá có thay đổi tùy theo hãng hàng không hay không?

a) cách 1: sử dụng boxplot để đánh giá
"""

plt.figure(figsize=(12, 6))
sns.boxplot(x='Airline', y='Price', data=merged_data, palette='viridis')
plt.title('Phân bố giá vé theo hãng hàng không')
plt.xlabel('Hãng hàng không')
plt.ylabel('Giá vé')
plt.xticks(rotation=45)
plt.show()

"""b) Cách 2: so sánh giá chuyến bay của các hãng  theo từng chuyến"""

unique_prices = merged_data.groupby('Route')['Price'].unique()
print(unique_prices)
chuyen_gia_ve_khac_nhau = unique_prices[unique_prices.apply(lambda x: len(x) > 1)].index[0]
chuyen_data = merged_data[merged_data['Route'] == chuyen_gia_ve_khac_nhau]
plt.bar(chuyen_data['Airline'], chuyen_data['Price'])
plt.xlabel('Hãng hàng không')
plt.ylabel('Giá vé')
plt.title('So sánh giá vé cho chuyến {}'.format(chuyen_gia_ve_khac_nhau))
plt.show()

"""c) Cách 3: Xem bằng table"""

table = merged_data.pivot_table(values='Price', index='Route', columns='Airline', aggfunc='first')
count_non_nan = table.count(axis=1)
filtered_merged_data = table[count_non_nan != 1]
filtered_merged_data

"""7/Giá vé bị ảnh hưởng như thế nào khi mua vé chỉ 1 hoặc 2 ngày trước ngày
khởi hành?

"""

merged_data['Date_of_Journey'] = pd.to_datetime(merged_data['Date_of_Journey'])

# Tính số ngày giữa ngày hiện tại và ngày khởi hành
merged_data['days_until_departure'] = (merged_data['Date_of_Journey'] - pd.to_datetime('today')).dt.days

# Lọc dữ liệu cho những chuyến bay chỉ 1 hoặc 2 ngày trước ngày khởi hành
merged_data_filtered = merged_data[merged_data['days_until_departure'].isin([-2, -1])]


plt.figure(figsize=(12, 6))
if len(merged_data_filtered) > 0:
  sns.violinplot(x='days_until_departure', y='Price', data=merged_data_filtered, palette='viridis')
  plt.title('Ảnh hưởng của thời gian mua vé trước ngày khởi hành đến giá vé')
  plt.xlabel('Số ngày trước ngày khởi hành')
  plt.ylabel('Giá vé')
  plt.show()

"""8/Giá vé có thay đổi theo thời gian đi và đến không?

a) Cách 1: Xem giá theo các mốc thời gian dạng bảng
"""

merged_data['departure_hour'] = pd.to_datetime(merged_data['Dep_Time']).dt.hour
merged_data['arrival_hour'] = pd.to_datetime(merged_data['Arrival_Time']).dt.hour

pivot_table = merged_data.pivot_table(values='Price', index='Route', columns='departure_hour', aggfunc='first')
count_non_nan2 = pivot_table.count(axis=1)
filtered_merged_data2 = pivot_table[count_non_nan2 != 1]
filtered_merged_data2

"""b) Cách 2: Xem giá theo thời gian của một chuyến"""

unique_prices = merged_data.groupby('Route')['Price'].unique()
chuyen_gia_ve_khac_nhau = unique_prices[unique_prices.apply(lambda x: len(x) > 1)].index[5]
chuyen_data = merged_data[merged_data['Route'] == chuyen_gia_ve_khac_nhau]

plt.figure(figsize=(14, 8))
plt.bar(chuyen_data['Dep_Time'], chuyen_data['Price'])
plt.xlabel('Thời gian Chuyến bay ')
plt.ylabel('Giá vé')
plt.title('So sánh giá vé cho chuyến {}'.format(chuyen_gia_ve_khac_nhau))

plt.show()

"""c) Cách 3: Xem biểu đồ boxplot"""

merged_data['departure_hour'] = pd.to_datetime(merged_data['Dep_Time']).dt.hour
merged_data['arrival_hour'] = pd.to_datetime(merged_data['Arrival_Time']).dt.hour

plt.figure(figsize=(16, 6))


plt.subplot(1, 2, 1)  # 1 row, 2 columns, first plot
sns.barplot(x='departure_hour', y='Price', data=merged_data, palette='hls')
plt.title('Giá vé theo giờ khởi hành ', fontsize=15)
plt.xlabel('Departure Time', fontsize=12)
plt.ylabel('Price', fontsize=12)



plt.subplot(1, 2, 2)  # 1 row, 2 columns, second plot
sns.boxplot(x='departure_hour', y='Price', data=merged_data, palette='hls')
plt.title('Phân bố giá vé theo giờ khởi hành', fontsize=15)
plt.xlabel('Departure Time', fontsize=12)
plt.ylabel('Price', fontsize=12)

plt.tight_layout()
plt.show()

plt.figure(figsize=(16, 6))

plt.subplot(1, 2, 1)  # 1 row, 2 columns, first plot
sns.barplot(x='arrival_hour', y='Price', data=merged_data, palette='hls')
plt.title('Giá vé theo thời gian đến', fontsize=15)
plt.xlabel('Departure Time', fontsize=12)
plt.ylabel('Price', fontsize=12)



plt.subplot(1, 2, 2)  # 1 row, 2 columns, second plot
sns.boxplot(x='arrival_hour', y='Price', data=merged_data, palette='hls')
plt.title('Phân bố giá vé theo thời gian đến', fontsize=15)
plt.xlabel('Departure Time', fontsize=12)
plt.ylabel('Price', fontsize=12)

plt.tight_layout()
plt.show()

"""9/Giá thay đổi như thế nào khi thay đổi Nguồn và Điểm đến?"""

plt.figure(figsize=(14, 8))
sns.boxplot(x='Source', y='Price', hue='Destination', data=merged_data)
plt.title('Sự thay đổi của giá vé theo nguồn và điểm đến')
plt.xlabel('Nguồn')
plt.ylabel('Giá vé')
plt.legend(title='Điểm đến', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

ax = sns.relplot(col="Source", y="Price", kind="line",x='Destination', data=merged_data, col_wrap=3)
ax.fig.subplots_adjust(top=0.8) # adjust the Figure in rp
ax.fig.suptitle('Giá chuyến bay theo từng nguồn và đích đến',fontsize=20)

"""b) Ngoài các đặc trưng trong tập dữ liệu, các yếu tố nào có khả năng ảnh hưởng đến giá vé chuyến bay ?"""

merged_data['Day_of_Week'] = merged_data['Date_of_Journey'].dt.day_name()
plt.figure(figsize=(10, 6))
sns.barplot(x='Day_of_Week', y='Price', data=merged_data, order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])
plt.title('Giá vé theo ngày trong tuần')
plt.xlabel('Ngày trong tuần')
plt.ylabel('Giá vé')
plt.show()

merged_data['Day_of_Week'] = merged_data['Date_of_Journey'].dt.day_name()
plt.figure(figsize=(10, 6))
sns.boxplot(x='Day_of_Week', y='Price', data=merged_data, order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])
plt.title('Phân bố giá vé theo ngày trong tuần')
plt.xlabel('Ngày trong tuần')
plt.ylabel('Giá vé')
plt.show()

"""Dự đoán giá vé

1/ Label Encoding
"""

le=LabelEncoder()
for col in merged_data.columns:
    if merged_data[col].dtype=='object':
        merged_data[col]=le.fit_transform(merged_data[col])
merged_data

"""2. Tạo  mô hình hồi qui với statsmodels"""

X = merged_data.drop(['Price','Date_of_Journey','Dep_Time','Arrival_Time'], axis=1)
X = sm.add_constant(X)
y = merged_data['Price']
lin_reg = sm.OLS(y, X).fit()
print(lin_reg.summary())
X

"""3. Sử dụng 4 model khác RandomForestRegressor, ExtraTreesRegressor, DecisionTreeRegressor , LinearRegressor"""

X = merged_data.drop(['Price','Date_of_Journey','Dep_Time','Arrival_Time'], axis=1)
y = merged_data['Price']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=42)

#scale dữ liệu biến độc lập train và test về 0-1
mmscaler=MinMaxScaler(feature_range=(0,1))
x_train=mmscaler.fit_transform(X_train)
x_test=mmscaler.fit_transform(X_test)
x_train=pd.DataFrame(x_train)
x_test=pd.DataFrame(x_test)

# Khởi tạo mô hình
rf_model = RandomForestRegressor()
et_model = ExtraTreesRegressor()
dt_model = DecisionTreeRegressor()
ln_model = LinearRegression()


# Fit dữ liệu vào mô hình
rf_model.fit(X_train, y_train)
et_model.fit(X_train, y_train)
dt_model.fit(X_train, y_train)
ln_model.fit(X_train, y_train)


# Dự đoán
rf_pred = rf_model.predict(X_test)
et_pred = et_model.predict(X_test)
dt_pred = dt_model.predict(X_test)
ln_pred = ln_model.predict(X_test)

#Hàm gán các giá trị kết quả đánh giá
def evaluate_model(y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)
    return mae, mse, rmse, r2

# Xem kết quả cho mỗi model

rf_eval = evaluate_model(y_test, rf_pred)
print("RandomForestRegressor Evaluation:")
print(f"MAE: {rf_eval[0]:.2f}")
print(f"MSE: {rf_eval[1]:.2f}")
print(f"RMSE: {rf_eval[2]:.2f}")
print(f"R^2: {rf_eval[3]:.4f}"'\n')


et_eval = evaluate_model(y_test, et_pred)
print("ExtraTreesRegressor Evaluation:")
print(f"MAE: {et_eval[0]:.2f}")
print(f"MSE: {et_eval[1]:.2f}")
print(f"RMSE: {et_eval[2]:.2f}")
print(f"R^2: {et_eval[3]:.4f}"'\n')


dt_eval = evaluate_model(y_test, dt_pred)
print("DecisionTreeRegressor Evaluation:")
print(f"MAE: {dt_eval[0]:.2f}")
print(f"MSE: {dt_eval[1]:.2f}")
print(f"RMSE: {dt_eval[2]:.2f}")
print(f"R^2: {dt_eval[3]:.4f}"'\n')


ln_eval = evaluate_model(y_test, ln_pred)
print("LinearRegression Evaluation:")
print(f"MAE: {ln_eval[0]:.2f}")
print(f"MSE: {ln_eval[1]:.2f}")
print(f"RMSE: {ln_eval[2]:.2f}")
print(f"R^2: {ln_eval[3]:.4f}"'\n')

rf_model.fit(X_train, y_train)

y_pred = rf_model.predict(X_test)
out=pd.DataFrame({'Price_actual':y_test,'Price_pred':y_pred})
result=merged_data.merge(out,left_index=True,right_index=True)


plt.figure(figsize=(10,5))
sns.regplot(x='Price_actual',y='Price_pred',data=result)
plt.title('Giá thực  Vs  Giá dự đoán ',fontsize=20)
plt.xlabel('Giá thực',fontsize=15)
plt.ylabel('Giá dự đoán',fontsize=15)
plt.show()